# Workflow name
name: baseline-profiles

# Workflow title
run-name: ${{ github.actor }} requested a workflow

# Event trigger so this actions gets executed every time a push is made on the main branch
# Change this event to what suits your project best.
# Read more at https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  # every Monday at 00:00
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

# Environment variables (Optional)
# Small projects might have signingConfigs locally. This could lead to failures on GitHub Actions.
# If that's the case, upload your properties defined locally to GitHub Secrets.

# On your signingConfigs, you can recover GitHub Secrets using: variable = System.getenv("VARIABLE")

# Then uncomment this block properly defining your uploaded variables
# env:
#  VARIABLE: ${{ secrets.VARIABLE }}

# Read more at https://docs.github.com/en/actions/security-guides/encrypted-secrets

# Jobs to executed on GitHub machines
jobs:

  # Job name
  generate-baseline-profiles:

    # Operating system where the job gets to be executed
    runs-on: macos-latest

    # Job steps
    steps:

      # Checks your code out on the machine
      - uses: actions/checkout@v3

      # Sets java up
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      # Sets gradle up
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Grants execute permission to gradle (safety step)
      - name: Grant Permissions to gradlew
        run: chmod +x gradlew

      # Create google-services.json file
      - name: Create google-services.json file
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON | base64 --decode > app/google-services.json

      # This allows us to build most of what we need without the emulator running
      # and using resources
      - name: Build app and benchmark
        run: ./gradlew :benchmark:assembleBenchmark :app:assembleBenchmark

      # Cleans managed device if previously settle and space currently is not available
      - name: Clean Managed Devices
        run: ./gradlew cleanManagedDevices --unused-only

      # Generates Baseline Profile
      - name: Generate Baseline Profile
        run: ./gradlew :benchmark:pixel2Api31BenchmarkAndroidTest -Pandroid.testoptions.manageddevices.emulator.gpu="swiftshader_indirect" -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.enabledRules=BaselineProfile -Dorg.gradle.workers.max=4

      # Sets the Baseline Profile on its proper place so it gets correctly bundled into Play Store
      - name: Move & Rename Baseline Profiles
        run: |
          mv -f benchmark/build/outputs/managed_device_android_test_additional_output/pixel2Api31/BaselineProfileGenerator_startup-baseline-prof.txt app/src/main/baseline-prof.txt

      # Create Pull Request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "Generate baseline profiles"
          title: "Generate baseline profiles"
          delete-branch: true
          reviewers: skydoves
          branch: actions/baseline-profiles